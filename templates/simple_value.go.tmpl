{{ template "header" . -}}
package supertypes

import (
	"context"
    {{- if eq .TypeName "Number" }}
	"math/big"
    {{ end }}
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure the implementation satisfies the expected interfaces.
var _ basetypes.{{ .TypeName }}Valuable = {{ .TypeName }}Value{}

type {{ .TypeName }}Value struct {
	basetypes.{{ .TypeName }}Value
}

func (v {{ .TypeName }}Value) Equal(o attr.Value) bool {
	other, ok := o.({{ .TypeName }}Value)

	if !ok {
		return false
	}

	return v.{{ .TypeName }}Value.Equal(other.{{ .TypeName }}Value)
}

func (v {{ .TypeName }}Value) Type(ctx context.Context) attr.Type {
	return {{ .TypeName }}Type{
		{{ .TypeName }}Type: v.{{ .TypeName }}Value.Type(ctx).(basetypes.{{ .TypeName }}Type),
	}
}

func New{{ .TypeName }}Null() {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Null(),
	}
}

func New{{ .TypeName }}Unknown() {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Unknown(),
	}
}

func New{{ .TypeName }}Value(s {{ golangType .TypeName }}) {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Value(s),
	}
}

{{ if eq .TypeName "String" }}
func New{{ .TypeName }}ValueOrNull(s {{ golangType .TypeName }}) {{ .TypeName }}Value {
	if s == "" {
		return New{{ .TypeName }}Null()
	}

	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Value(s),
	}
}
{{ end }}

{{ if ne .TypeName "Number" }}
func New{{ .TypeName }}PointerValue(s *{{ golangType .TypeName }}) {{ .TypeName }}Value {
	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}PointerValue(s),
	}
}

func New{{ .TypeName }}PointerValueOrNull(s *{{ golangType .TypeName }}) {{ .TypeName }}Value {
	if s == nil {
		return New{{ .TypeName }}Null()
	}

	return {{ .TypeName }}Value{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}PointerValue(s),
	}
}

{{ end }}

// * CustomFunc

// Get returns the known {{ .TypeName }} value.
{{- if eq .TypeName "Int64" }} If Int64 is null or unknown, returns 0.{{ end }}
{{- if eq .TypeName "Float64" }} If Float64 is null or unknown, returns 0.0.{{ end }}
{{- if eq .TypeName "String" }} If String is null or unknown, returns "".{{ end }}
{{- if eq .TypeName "Bool" }} If Bool is null or unknown, returns false.{{ end }}
{{- if eq .TypeName "Number" }} If Number is null or unknown, returns 0.0.{{ end }}
func (v *{{ .TypeName }}Value) Get() {{ golangType .TypeName }} {
	return v.{{ .TypeName }}Value.Value{{  if eq .TypeName "Number"}}BigFloat{{else}}{{ .TypeName }}{{end}}()
}

{{ if ne .TypeName "Number" }}
// GetPtr returns a pointer to the known int64 value, nil for a
// null value, or a pointer to 0 for an unknown value.
func (v *{{ .TypeName }}Value) GetPtr() *{{ golangType .TypeName }} {
	return v.{{ .TypeName }}Value.Value{{ .TypeName }}Pointer()
}
{{ end }}

// Set sets the {{ .TypeName }} value.
func (v *{{ .TypeName }}Value) Set(s {{ golangType .TypeName }}) {
	{{ if eq .TypeName "String" }}
	if s == "" {
		v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null()
		return
	}
	{{ end }}
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Value(s)
}

{{ if ne .TypeName "Number" }}
// SetPtr sets a pointer to the {{ .TypeName }} value.
func (v *{{ .TypeName }}Value) SetPtr(s *{{ golangType .TypeName }}) {
	if s == nil {
		v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null()
		return
	}
	
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}PointerValue(s)
}
{{ end }}

{{ if eq .TypeName "Float64" }}

// SetFloat32 sets a converted float32 to float64 value.
func (v *Float64Value) SetFloat32(s float32) {
	v.Set(setFloatValue(s))
}

// SetFloat64 sets a float64 value. This is a same func as Set.
func (v *Float64Value) SetFloat64(s float64) {
	v.Set(s)
}

// SetFloat32Ptr sets a converted float32 to float64 pointer. If the pointer is nil, the value is set to null.
func (v *Float64Value) SetFloat32Ptr(s *float32) {
	if s == nil {
		v.Float64Value = basetypes.NewFloat64Null()
		return
	}

	v.Float64Value = basetypes.NewFloat64Value(setFloatValue(*s))
}

// SetFloat64Ptr sets a float64 pointer. This is a same func as SetPtr.
func (v *Float64Value) SetFloat64Ptr(s *float64) {
	v.SetPtr(s)
}

// GetFloat32 returns converted float64 to float32 value.
func (v *Float64Value) GetFloat32() float32 {
	return float32(v.Get())
}

// GetFloat64 returns the float64 value. This is a same func as Get.
func (v Float64Value) GetFloat64() float64 {
	return v.Get()
}

// GetFloat32Ptr returns a converted float64 to float32 pointer. If the value is null or unknown, nil is returned.
func (v Float64Value) GetFloat32Ptr() *float32 {
	if v.IsKnown() {
		s := float32(v.Get())
		return &s
	}

	return nil
}

// GetFloat64Ptr returns a float64 pointer. This is a same func as GetPtr. If the value is null or unknown, nil is returned.
func (v Float64Value) GetFloat64Ptr() *float64 {
	return v.GetPtr()
}

type floatValues interface {
	float32 | float64
}

func setFloatValue[T floatValues](s T) float64 {
	return float64(s)
}
{{ end }}

{{ if or (eq .TypeName "Int64") (eq .TypeName "Int32") }}

{{ $listOfIntTypes := split "Int,Int8,Int16,Int32,Int64" "," }}
{{ range $i, $e := $listOfIntTypes }}

// * {{$e}} type

// Set{{$e}} sets the {{ golangType $.TypeName }} value to the given {{ golangType $e }}.
func (v *{{ $.TypeName }}Value) Set{{$e}}(s {{ golangType $e }}) {
	v.Set(set{{ $.TypeName }}Value(s))
}

// Set{{$e}}Ptr sets the {{ golangType $.TypeName }} value to the given {{ golangType $e }} pointer. If the pointer is nil, the value is set to null.
func (v *{{$.TypeName}}Value) Set{{$e}}Ptr(s *{{ golangType $e }}) {
	if s == nil {
		v.{{$.TypeName}}Value = basetypes.New{{$.TypeName}}Null()
		return
	}
	v.{{$.TypeName}}Value = basetypes.New{{$.TypeName}}Value(set{{$.TypeName}}Value(*s))
}

// Get{{$e}} returns converted {{ golangType $.TypeName }} to {{ golangType $e }} value.
func (v {{$.TypeName}}Value) Get{{$e}}() {{ golangType $e }} {
	return {{ golangType $e }}(v.Get())
}

// Get{{$e}}Ptr returns a converted {{ golangType $.TypeName }} to {{ golangType $e }} pointer. If the value is null or unknown, nil is returned.
func (v {{$.TypeName}}Value) Get{{$e}}Ptr() *{{ golangType $e }} {
	if v.IsKnown() {
		i := {{ golangType $e }}(v.Get())
		return &i
	}

	return nil
}

{{ end }}


func set{{ .TypeName }}Value[T intValues](s T) {{ golangType .TypeName }} {
	return {{ golangType .TypeName }}(s)
}

{{ end }}

// SetNull sets the {{ .TypeName }} value to null.
func (v *{{ .TypeName }}Value) SetNull() {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null()
}

// SetUnknown sets the {{ .TypeName }} value to unknown.
func (v *{{ .TypeName }}Value) SetUnknown() {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Unknown()
}

// IsKnown returns true if the value is not null and not unknown.
func (v {{ .TypeName }}Value) IsKnown() bool {
	return !v.{{ .TypeName }}Value.IsNull() && !v.{{ .TypeName }}Value.IsUnknown()
}
