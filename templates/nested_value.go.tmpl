{{ template "header" . -}}
package supertypes

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ basetypes.{{ .TypeName }}Valuable = {{ .TypeName }}Value{}

	_ basetypes.{{ .TypeName }}Valuable = {{ .TypeName }}NestedObjectValueOf[struct{}]{}
	_ NestedObjectValue      = {{ .TypeName }}NestedObjectValueOf[struct{}]{}
)

type {{ .TypeName }}NestedValue struct {
	basetypes.{{ .TypeName }}Value
}

func New{{ .TypeName }}NestedObjectTypeOf[T any](ctx context.Context) {{ .TypeName }}NestedObjectTypeOf[T] {
	return {{ .TypeName }}NestedObjectTypeOf[T]{basetypes.{{ .TypeName }}Type{ElemType: NewObjectTypeOf[T](ctx)}}
}

// {{ .TypeName }}NestedObjectValueOf represents a Terraform Plugin Framework {{ .TypeName }} value whose elements are of type ObjectTypeOf.
type {{ .TypeName }}NestedObjectValueOf[T any] struct {
	basetypes.{{ .TypeName }}Value
}

func (v {{ .TypeName }}NestedValue) Type(ctx context.Context) attr.Type {
	return v.{{ .TypeName }}Value.Type(ctx)
}

func (v {{ .TypeName }}NestedObjectValueOf[T]) Type(ctx context.Context) attr.Type {
	return New{{ .TypeName }}NestedObjectTypeOf[T](ctx)
}

func (v {{ .TypeName }}NestedObjectValueOf[T]) Equal(o attr.Value) bool {
	other, ok := o.({{ .TypeName }}NestedObjectValueOf[T])

	if !ok {
		return false
	}

	return v.{{ .TypeName }}Value.Equal(other.{{ .TypeName }}Value)
}

func (v {{ .TypeName }}NestedValue) To{{ .TypeName }}Value(_ context.Context) (basetypes.{{ .TypeName }}Value, diag.Diagnostics) {
	return v.{{ .TypeName }}Value, nil
}

func New{{ .TypeName }}NestedNull(elementType attr.Type) {{ .TypeName }}NestedValue {
	return {{ .TypeName }}NestedValue{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Null(elementType),
	}
}

func New{{ .TypeName }}NestedUnknown(elementType attr.Type) {{ .TypeName }}NestedValue {
	return {{ .TypeName }}NestedValue{
		{{ .TypeName }}Value: basetypes.New{{ .TypeName }}Unknown(elementType),
	}
}

// * CustomFunc

func (v *{{ .TypeName }}NestedValue) Get(ctx context.Context, target interface{}, allowUnhandled bool) (diag diag.Diagnostics) {
	return v.{{ .TypeName }}Value.ElementsAs(ctx, target, allowUnhandled)
}

func (v *{{ .TypeName }}NestedValue) Set(ctx context.Context, elements any) diag.Diagnostics {
	var d diag.Diagnostics
	v.{{ .TypeName }}Value, d = types.{{ .TypeName }}ValueFrom(ctx, v.ElementType(ctx), elements)
	return d
}

func (v *{{ .TypeName }}NestedValue) SetNull(ctx context.Context) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Null(v.ElementType(ctx))
}

func (v *{{ .TypeName }}NestedValue) SetUnknown(ctx context.Context) {
	v.{{ .TypeName }}Value = basetypes.New{{ .TypeName }}Unknown(v.ElementType(ctx))
}

func (v {{ .TypeName }}NestedValue) IsKnown() bool {
	return !v.{{ .TypeName }}Value.IsNull() && !v.{{ .TypeName }}Value.IsUnknown()
}

// * {{ .TypeName }}NestedObjectValueOf[T]

{{/* Get/Set */}}
{{ if eq .TypeName "Map" -}}

{{/* Map */}}

// Get returns a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
func (v {{ .TypeName }}NestedObjectValueOf[T]) Get(ctx context.Context) (map[string]*T, diag.Diagnostics) {
	return nestedObjectValueMap[T](ctx, v.{{ .TypeName }}Value)
}

// MustGet returns a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// panics if the set conversion fails.
func (v {{ .TypeName }}NestedObjectValueOf[T]) MustGet(ctx context.Context) map[string]*T {
	return MustDiag(nestedObjectValueMap[T](ctx, v.{{ .TypeName }}Value))
}

// DiagsGet returns a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// diags is appended if the set conversion fails.
func (v {{ .TypeName }}NestedObjectValueOf[T]) DiagsGet(ctx context.Context, diags diag.Diagnostics) map[string]*T {
	vv, d := nestedObjectValueMap[T](ctx, v.{{ .TypeName }}Value)
	diags.Append(d...)
	return vv
}

// Set returns a {{ .TypeName }}NestedObjectValueOf from a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
func (v *{{ .TypeName }}NestedObjectValueOf[T]) Set(ctx context.Context, m map[string]*T) diag.Diagnostics {
	var diags diag.Diagnostics
	v.{{ .TypeName }}Value, diags = basetypes.New{{ .TypeName }}ValueFrom(ctx, NewObjectTypeOf[T](ctx), m)
	return diags
}

// MustSet returns a {{ .TypeName }}NestedObjectValueOf from a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// panics if the set conversion fails.
func (v *{{ .TypeName }}NestedObjectValueOf[T]) MustSet(ctx context.Context, m map[string]*T) {
	MustDiags(v.Set(ctx, m))
}

// DiagsSet returns a {{ .TypeName }}NestedObjectValueOf from a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// diags is appended if the set conversion fails.
func (v *{{ .TypeName }}NestedObjectValueOf[T]) DiagsSet(ctx context.Context, diags diag.Diagnostics, m map[string]*T) {
	diags.Append(v.Set(ctx, m)...)
}

{{ else -}}

{{/* Slice (List/Set) */}}

// Get returns a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
func (v {{ .TypeName }}NestedObjectValueOf[T]) Get(ctx context.Context) ([]*T, diag.Diagnostics) {
	return nestedObjectValueSlice[T](ctx, v.{{ .TypeName }}Value)
}

// MustGet returns a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// panics if the set conversion fails.
func (v {{ .TypeName }}NestedObjectValueOf[T]) MustGet(ctx context.Context) []*T {
	return MustDiag(nestedObjectValueSlice[T](ctx, v.{{ .TypeName }}Value))
}

// DiagsGet returns a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// diags is appended if the set conversion fails.
func (v {{ .TypeName }}NestedObjectValueOf[T]) DiagsGet(ctx context.Context, diags diag.Diagnostics) []*T {
	vv, d := nestedObjectValueSlice[T](ctx, v.{{ .TypeName }}Value)
	diags.Append(d...)
	return vv
}

// Set returns a {{ .TypeName }}NestedObjectValueOf from a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
func (v *{{ .TypeName }}NestedObjectValueOf[T]) Set(ctx context.Context, m []*T) diag.Diagnostics {
	var diags diag.Diagnostics
	v.{{ .TypeName }}Value, diags = basetypes.New{{ .TypeName }}ValueFrom(ctx, NewObjectTypeOf[T](ctx), m)
	return diags
}

// MustSet returns a {{ .TypeName }}NestedObjectValueOf from a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// panics if the set conversion fails.
func (v *{{ .TypeName }}NestedObjectValueOf[T]) MustSet(ctx context.Context, m []*T) {
	MustDiags(v.Set(ctx, m))
}

// DiagsSet returns a {{ .TypeName }}NestedObjectValueOf from a slice of pointers to the elements of a {{ .TypeName }}NestedObject.
// diags is appended if the set conversion fails.
func (v *{{ .TypeName }}NestedObjectValueOf[T]) DiagsSet(ctx context.Context, diags diag.Diagnostics, m []*T) {
	diags.Append(v.Set(ctx, m)...)
}
{{ end -}}

// IsKnown returns whether the value is known.
func (v {{ .TypeName }}NestedObjectValueOf[T]) IsKnown() bool {
	return !v.{{ .TypeName }}Value.IsNull() && !v.{{ .TypeName }}Value.IsUnknown()
}

func (v *{{ .TypeName }}NestedObjectValueOf[T]) SetNull(ctx context.Context) {
	*v = New{{ .TypeName }}NestedObjectValueOfNull[T](ctx)
}

func (v *{{ .TypeName }}NestedObjectValueOf[T]) SetUnknown(ctx context.Context) {
	*v = New{{ .TypeName }}NestedObjectValueOfUnknown[T](ctx)
}

func New{{ .TypeName }}NestedObjectValueOfNull[T any](ctx context.Context) {{ .TypeName }}NestedObjectValueOf[T] {
	return {{ .TypeName }}NestedObjectValueOf[T]{ {{ .TypeName }}Value: basetypes.New{{ .TypeName }}Null(NewObjectTypeOf[T](ctx))}
}

func New{{ .TypeName }}NestedObjectValueOfUnknown[T any](ctx context.Context) {{ .TypeName }}NestedObjectValueOf[T] {
	return {{ .TypeName }}NestedObjectValueOf[T]{ {{ .TypeName }}Value: basetypes.New{{ .TypeName }}Unknown(NewObjectTypeOf[T](ctx))}
}

{{ if eq .TypeName "Map" -}}
func New{{ .TypeName }}NestedObjectValueOfPtr[T any](ctx context.Context, m map[string]*T) {{ .TypeName }}NestedObjectValueOf[T] {
	return New{{ .TypeName }}NestedObjectValueOfMap(ctx, m)
}
{{ else -}}
func New{{ .TypeName }}NestedObjectValueOfPtr[T any](ctx context.Context, t *T) {{ .TypeName }}NestedObjectValueOf[T] {
	return New{{ .TypeName }}NestedObjectValueOfSlice(ctx, []*T{t})
}
{{ end -}}

{{ if eq .TypeName "Map" -}}
func New{{ .TypeName }}NestedObjectValueOfMap[T any](ctx context.Context, m map[string]*T) {{ .TypeName }}NestedObjectValueOf[T] {
	return new{{ .TypeName }}NestedObjectValueOf[T](ctx, m)
}
{{ else -}}
func New{{ .TypeName }}NestedObjectValueOfSlice[T any](ctx context.Context, ts []*T) {{ .TypeName }}NestedObjectValueOf[T] {
	return new{{ .TypeName }}NestedObjectValueOf[T](ctx, ts)
}
{{ end -}}

{{ if eq .TypeName "Map" -}}
func New{{ .TypeName }}NestedObjectValueOfValueMap[T any](ctx context.Context, m map[string]T) {{ .TypeName }}NestedObjectValueOf[T] {
	return new{{ .TypeName }}NestedObjectValueOf[T](ctx, m)
}
{{ else -}}
func New{{ .TypeName }}NestedObjectValueOfValueSlice[T any](ctx context.Context, ts []T) {{ .TypeName }}NestedObjectValueOf[T] {
	return new{{ .TypeName }}NestedObjectValueOf[T](ctx, ts)
}
{{ end -}}

func new{{ .TypeName }}NestedObjectValueOf[T any](ctx context.Context, elements any) {{ .TypeName }}NestedObjectValueOf[T] {
	return {{ .TypeName }}NestedObjectValueOf[T]{ {{ .TypeName }}Value: MustDiag(basetypes.New{{ .TypeName }}ValueFrom(ctx, NewObjectTypeOf[T](ctx), elements))}
}

